// <auto-generated />
using System;
using EpiApp.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EpiApp.Repository.Migrations
{
    [DbContext(typeof(MySqlServerContext))]
    partial class MySqlServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EpiApp.Domain.Entities.Epi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ca")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PrazoTroca")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidadeCa")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Epi", (string)null);
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.EpiSetor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EpiId")
                        .HasColumnType("int");

                    b.Property<int>("IdEpi")
                        .HasColumnType("int");

                    b.Property<int>("IdSetor")
                        .HasColumnType("int");

                    b.Property<int?>("SetorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpiId");

                    b.HasIndex("SetorId");

                    b.ToTable("EpiSetor", (string)null);
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Funcionario", (string)null);
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.FuncionarioEpi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpiId")
                        .HasColumnType("int");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpiId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("FuncionarioEpi", (string)null);
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.FuncionarioSetor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<int>("SetorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("SetorId");

                    b.ToTable("FuncionarioSetor", (string)null);
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.Setor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Setor", (string)null);
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.EpiSetor", b =>
                {
                    b.HasOne("EpiApp.Domain.Entities.Epi", "Epi")
                        .WithMany("Setores")
                        .HasForeignKey("EpiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EpiApp.Domain.Entities.Setor", "Setor")
                        .WithMany("Epis")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Epi");

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.FuncionarioEpi", b =>
                {
                    b.HasOne("EpiApp.Domain.Entities.Epi", "Epi")
                        .WithMany("Funcionarios")
                        .HasForeignKey("EpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EpiApp.Domain.Entities.Funcionario", "Funcionario")
                        .WithMany("Epis")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Epi");

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.FuncionarioSetor", b =>
                {
                    b.HasOne("EpiApp.Domain.Entities.Funcionario", "Funcionario")
                        .WithMany("Setores")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EpiApp.Domain.Entities.Setor", "Setor")
                        .WithMany("Funcionarios")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.Epi", b =>
                {
                    b.Navigation("Funcionarios");

                    b.Navigation("Setores");
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.Funcionario", b =>
                {
                    b.Navigation("Epis");

                    b.Navigation("Setores");
                });

            modelBuilder.Entity("EpiApp.Domain.Entities.Setor", b =>
                {
                    b.Navigation("Epis");

                    b.Navigation("Funcionarios");
                });
#pragma warning restore 612, 618
        }
    }
}
